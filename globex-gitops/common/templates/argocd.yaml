apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  finalizers:
  - argoproj.io/finalizer
  name: {{ .Values.name }}
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  applicationInstanceLabelKey: argocd.argoproj.io/instance
  applicationSet:
    resources:
      {{- toYaml .Values.applicationSet.resources | nindent 6 }}
  controller:
    processors: {}
    resources:
      {{- toYaml .Values.controller.resources | nindent 6 }}
  initialSSHKnownHosts: {}
  rbac:
    defaultPolicy: role:readonly
    policy: |
      g, cluster-admins, role:admin
  repo:
    resources:
      {{- toYaml .Values.repo.resources | nindent 6 }}
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      kinds:
      - TaskRun
      - PipelineRun
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      {{- toYaml .Values.server.resources | nindent 6 }}
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
    service:
      type: ""
  sso:
    dex:
      openShiftOAuth: true
      resources:
        {{- toYaml .Values.dex.resources | nindent 8 }}
    provider: dex    
  tls:
    ca: {}
  extraConfig:
    resource.customizations: | 
      operators.coreos.com/Subscription:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.state ~= nil then
              if obj.status.state == "AtLatestKnown" then
                hs.message = obj.status.state .. " - " .. obj.status.currentCSV
                hs.status = "Healthy"
              end
            end
          end
          return hs
      
      monitoring.coreos.com/Prometheus:
        health.lua: |
          local hs={ status = "Progressing", message = "Waiting for initialization" }
          found_status = false

          if obj.status ~= nil then
            found_status = true
            if obj.status.conditions ~= nil then
              for i, condition in ipairs(obj.status.conditions) do

                if condition.type == "Available" and condition.status ~= "True" then
                  if condition.reason == "SomePodsNotReady" then
                    hs.status = "Progressing"
                  else
                    hs.status = "Degraded"
                  end
                  hs.message = condition.message or condition.reason
                end
                if condition.type == "Available" and condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = "All instances are available"
                end
              end
            end
          end

          if not found_status then
              hs = { status = "Healthy", message = "All instances are available" }
          end

          return hs
